apiVersion: apps/v1
kind: StatefulSet
metadata:
  {{- with (mergeOverwrite (deepCopy .Values.global.statefulsetAnnotations) .Values.eventReporter.statefulsetAnnotations) }}
  annotations:
    {{- range $key, $value := . }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}
  {{- end }}
  name: {{ template "argo-cd.controller.fullname" . }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "argo-cd.labels" (dict "context" . "component" .Values.eventReporter.name "name" .Values.eventReporter.name) | nindent 4 }}
spec:
  replicas: {{ .Values.eventReporter.replicas }}
  # TODO: Remove for breaking release as history limit cannot be patched
  revisionHistoryLimit: 5
  serviceName: {{ include "argo-cd.controller.fullname" . }}
  selector:
    matchLabels:
      {{- include "argo-cd.selectorLabels" (dict "context" . "name" .Values.eventReporter.name) | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/cmd-params: {{ include (print $.Template.BasePath "/argocd-configs/argocd-cmd-params-cm.yaml") . | sha256sum }}
        {{- if (hasKey .Values.server "configEnabled") | ternary .Values.server.configEnabled .Values.configs.cm.create }}
        checksum/cm: {{ include (print $.Template.BasePath "/argocd-configs/argocd-cm.yaml") . | sha256sum }}
        {{- end }}
        {{- with (mergeOverwrite (deepCopy .Values.global.podAnnotations) .Values.eventReporter.podAnnotations) }}
        {{- range $key, $value := . }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
        {{- end }}
      labels:
        {{- include "argo-cd.labels" (dict "context" . "component" .Values.eventReporter.name "name" .Values.eventReporter.name) | nindent 8 }}
        {{- with (mergeOverwrite (deepCopy .Values.global.podLabels) .Values.eventReporter.podLabels) }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.eventReporter.imagePullSecrets | default .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.global.hostAliases }}
      hostAliases:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.global.securityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.eventReporter.priorityClassName | default .Values.global.priorityClassName }}
      priorityClassName: {{ . }}
      {{- end }}
      {{- if .Values.eventReporter.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.eventReporter.terminationGracePeriodSeconds }}
      {{- end }}
      serviceAccountName: {{ include "argo-cd.eventReporterServiceAccountName" . }}
      containers:
        - args:
            - /usr/local/bin/event-reporter-server
            - --metrics-port={{ .Values.eventReporter.containerPorts.metrics }}
          {{- with .Values.eventReporter.extraArgs }}
            {{- toYaml . | nindent 8 }}
          {{- end }}
          image: {{ default .Values.global.image.repository .Values.eventReporter.image.repository }}:{{ default (include "argo-cd.defaultTag" .) .Values.eventReporter.image.tag }}
          imagePullPolicy: {{ default .Values.global.image.imagePullPolicy .Values.eventReporter.image.imagePullPolicy }}
          name: {{ .Values.eventReporter.name }}
          env:
            {{- with (concat .Values.global.env .Values.eventReporter.env) }}
              {{- toYaml . | nindent 10 }}
            {{- end }}
            - name: EVENT_REPORTER_REPLICAS
              value: {{ .Values.eventReporter.replicas | quote }}
            - name: ARGOCD_RECONCILIATION_TIMEOUT
              valueFrom:
                configMapKeyRef:
                  name: argocd-cm
                  key: timeout.reconciliation
                  optional: true
            - name: ARGOCD_HARD_RECONCILIATION_TIMEOUT
              valueFrom:
                configMapKeyRef:
                  name: argocd-cm
                  key: timeout.hard.reconciliation
                  optional: true
            - name: ARGOCD_APPLICATION_CONTROLLER_REPO_SERVER
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: repo.server
                  optional: true
            - name: ARGOCD_APPLICATION_CONTROLLER_REPO_SERVER_TIMEOUT_SECONDS
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: controller.repo.server.timeout.seconds
                  optional: true
            - name: ARGOCD_APPLICATION_CONTROLLER_STATUS_PROCESSORS
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: controller.status.processors
                  optional: true
            - name: ARGOCD_APPLICATION_CONTROLLER_OPERATION_PROCESSORS
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: controller.operation.processors
                  optional: true
            - name: ARGOCD_APPLICATION_CONTROLLER_LOGFORMAT
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: controller.log.format
                  optional: true
            - name: ARGOCD_APPLICATION_CONTROLLER_LOGLEVEL
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: controller.log.level
                  optional: true
            - name: ARGOCD_APPLICATION_CONTROLLER_METRICS_CACHE_EXPIRATION
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: controller.metrics.cache.expiration
                  optional: true
            - name: ARGOCD_APPLICATION_CONTROLLER_SELF_HEAL_TIMEOUT_SECONDS
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: controller.self.heal.timeout.seconds
                  optional: true
            - name: ARGOCD_APPLICATION_CONTROLLER_REPO_SERVER_PLAINTEXT
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: controller.repo.server.plaintext
                  optional: true
            - name: ARGOCD_APPLICATION_CONTROLLER_REPO_SERVER_STRICT_TLS
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: controller.repo.server.strict.tls
                  optional: true
            - name: ARGOCD_APPLICATION_CONTROLLER_PERSIST_RESOURCE_HEALTH
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: controller.resource.health.persist
                  optional: true
            - name: ARGOCD_APP_STATE_CACHE_EXPIRATION
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: controller.app.state.cache.expiration
                  optional: true
            - name: REDIS_SERVER
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: redis.server
                  optional: true
            - name: REDIS_COMPRESSION
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: redis.compression
                  optional: true
            - name: REDISDB
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: redis.db
                  optional: true
            - name: REDIS_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ default (include "argo-cd.redis.fullname" .) .Values.externalRedis.existingSecret }}
                  key: redis-username
                  optional: true
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ default (include "argo-cd.redis.fullname" .) .Values.externalRedis.existingSecret }}
                  key: redis-password
                  optional: true
            - name: ARGOCD_DEFAULT_CACHE_EXPIRATION
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: controller.default.cache.expiration
                  optional: true
            - name: ARGOCD_APPLICATION_CONTROLLER_OTLP_ADDRESS
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: otlp.address
                  optional: true
            - name: ARGOCD_APPLICATION_NAMESPACES
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: application.namespaces
                  optional: true
            - name: EVENT_REPORTER_SHARDING_ALGORITHM
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: controller.sharding.algorithm
                  optional: true
            - name: ARGOCD_APPLICATION_CONTROLLER_KUBECTL_PARALLELISM_LIMIT
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: controller.kubectl.parallelism.limit
                  optional: true
        {{- with .Values.eventReporter.envFrom }}
          envFrom:
          {{- toYaml . | nindent 10 }}
        {{- end }}
          ports:
            - name: metrics
              containerPort: {{ .Values.eventReporter.containerPorts.metrics }}
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /healthz
              port: metrics
            initialDelaySeconds: {{ .Values.eventReporter.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.eventReporter.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.eventReporter.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.eventReporter.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.eventReporter.readinessProbe.failureThreshold }}
          resources:
          {{- toYaml .Values.eventReporter.resources | nindent 10 }}
        {{- with .Values.eventReporter.containerSecurityContext }}
          securityContext:
          {{- toYaml . | nindent 10 }}
        {{- end }}
          workingDir: /home/argocd
          volumeMounts:
        {{- with .Values.eventReporter.volumeMounts }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
            - mountPath: /app/config/controller/tls
              name: argocd-repo-server-tls
            - mountPath: /home/argocd
              name: argocd-home
      {{- with .Values.eventReporter.extraContainers }}
        {{- tpl (toYaml .) $ | nindent 6 }}
      {{- end }}
      {{- with .Values.eventReporter.initContainers }}
      initContainers:
        {{- tpl (toYaml .) $ | nindent 6 }}
      {{- end }}
      {{- with include "argo-cd.affinity" (dict "context" . "component" .Values.eventReporter) }}
      affinity:
        {{- trim . | nindent 8 }}
      {{- end }}
      {{- with .Values.eventReporter.nodeSelector | default .Values.global.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.eventReporter.tolerations | default .Values.global.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.eventReporter.topologySpreadConstraints | default .Values.global.topologySpreadConstraints }}
      topologySpreadConstraints:
        {{- range $constraint := . }}
        - {{ toYaml $constraint | nindent 8 | trim }}
          {{- if not $constraint.labelSelector }}
          labelSelector:
            matchLabels:
            {{- include "argo-cd.selectorLabels" (dict "context" $ "name" $.Values.eventReporter.name) | nindent 12 }}
          {{- end }}
        {{- end }}
      {{- end }}
      volumes:
      {{- with .Values.eventReporter.volumes }}
        {{- toYaml . | nindent 6 }}
      {{- end }}
        - name: argocd-home
          emptyDir: {}
        - name: argocd-repo-server-tls
          secret:
            secretName: argocd-repo-server-tls
            optional: true
            items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      {{- if .Values.eventReporter.hostNetwork }}
      hostNetwork: {{ .Values.eventReporter.hostNetwork }}
      {{- end }}
      {{- with .Values.eventReporter.dnsConfig }}
      dnsConfig:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      dnsPolicy: {{ .Values.eventReporter.dnsPolicy }}
